version: "2.1"

services:
  infinispan:
    image: infinispan/server:11.0.4.Final
    container_name: infinispan
    ports:
      - 11222:11222
    command: "/opt/infinispan/bin/server.sh -c infinispan-demo.xml"
    volumes:
      - ./infinispan/infinispan.xml:/opt/infinispan/server/conf/infinispan-demo.xml:z
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:11222/rest/v2/cache-managers/default/health/status",
        ]
      interval: 1s
      timeout: 1s
      retries: 50

  zookeeper:
    container_name: zookeeper
    image: strimzi/kafka:0.20.1-kafka-2.6.0
    command:
      ["sh", "-c", "bin/zookeeper-server-start.sh config/zookeeper.properties"]
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: "/tmp/logs"

  kafka:
    image: strimzi/kafka:0.20.1-kafka-2.6.0
    container_name: kafka
    command:
      [
        "sh",
        "-c",
        "bin/kafka-server-start.sh config/server.properties --override inter.broker.listener.name=$${KAFKA_INTER_BROKER_LISTENER_NAME} --override listener.security.protocol.map=$${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP} --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}",
      ]
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      LOG_DIR: "/tmp/logs"

  data-index:
    container_name: data-index
    image: quay.io/kiegroup/kogito-data-index-infinispan:${KOGITO_VERSION}
    ports:
      - "8180:8080"
    depends_on:
      kafka:
        condition: service_started
      infinispan:
        condition: service_healthy
    volumes:
      - ./persistence/:/home/kogito/data/protobufs/
    environment:
      QUARKUS_INFINISPAN_CLIENT_SERVER_LIST: infinispan:11222
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KOGITO_DATA_INDEX_PROPS: -Dkogito.protobuf.folder=/home/kogito/data/protobufs/

  management-console:
    container_name: management-console
    image: quay.io/kiegroup/kogito-management-console:${KOGITO_VERSION}
    ports:
      - 8280:8080
    depends_on:
      data-index:
        condition: service_started
    volumes:
      - ./svg/:/home/kogito/data/svg/
    environment:
      KOGITO_DATAINDEX_HTTP_URL: http://${DOCKER_GATEWAY_HOST}:8180
      KOGITO_MANAGEMENT_CONSOLE_PROPS: -Dkogito.svg.folder.path=/home/kogito/data/svg

  task-console:
    container_name: task-console
    image: quay.io/kiegroup/kogito-task-console:${KOGITO_VERSION}
    ports:
      - 8380:8080
    depends_on:
      data-index:
        condition: service_started
    environment:
      KOGITO_TASK_CONSOLE_PROPS: -Dkogito.test.user-system.enabled=true

  kogito:
    container_name: kogito
    image: sample-kogito
    ports:
      - 8080:8080
    depends_on:
      task-console:
        condition: service_started
    environment:
      kafka_bootstrap_servers: kafka:29092
      kogito_service_url: http://localhost:8080
      kogito_dataindex_http_url: data-index:8180
      kogito_dataindex_ws_url: ws://data-index:8180
      quarkus_infinispan_client_server: infinispan:11222
      mp_messaging_outgoing_processinstances: kafka:9092
      mp_messaging_outgoing_usertaskinstances: kafka:9092
      mp_messaging_outgoing_variables_events: kafka:9092
      mp_messaging_incoming_kogito_incoming_stream: kafka:29092
      mp_messaging_outgoing_kogito_outgoing_stream: kafka:9092

  blazorui:
    container_name: blazorui
    image: blazor-ui
    ports:
      - 5000:80
    depends_on:
      task-console:
        condition: service_started
    environment:
      Kogito_BaseUrl: kogito:8080
      ASPNETCORE_ENVIRONMENT: Development
      Kafka_BaseUrl: kafka:29092
      Ksql_BaseUrl: ksql-server:8088

  schema-registry:
    image: "confluentinc/cp-schema-registry:5.2.2"
    hostname: schema-registry
    depends_on:
      - zookeeper
      - kafka
    ports:
      - '8081:8081'
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181

  # Runs the Kafka KSQL Server
  ksql-server:
    image: "confluentinc/cp-ksql-server:5.2.2"
    hostname: ksql-server
    ports:
      - '8088:8088'
    depends_on:
      - kafka
      - schema-registry
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "kafka:29092"
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_KSQL_SERVICE_ID: "ksql-examples-service-id"
      KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"  
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"

# Runs the KSQL CLI
  ksql-cli:
    image: confluentinc/cp-ksql-cli:5.2.2
    container_name: ksql-cli
    depends_on:
      - kafka
      - ksql-server
    entrypoint: /bin/sh
    tty: true